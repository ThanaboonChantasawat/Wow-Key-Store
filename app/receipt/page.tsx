"use client"

import { useEffect, useState } from "react"
import { useSearchParams, useRouter } from "next/navigation"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import { 
  Receipt, 
  Loader2, 
  Download, 
  ArrowLeft,
  CheckCircle,
  Store,
  Calendar,
  CreditCard,
  Package
} from "lucide-react"

interface OrderItem {
  productId: string
  name: string
  price: number
}

interface Order {
  id: string
  userId: string
  shopId: string
  shopName: string
  items: OrderItem[]
  totalAmount: number
  platformFee: number
  sellerAmount: number
  paymentIntentId: string
  transferId?: string
  paymentStatus: string
  status: string
  createdAt: string
  updatedAt: string
  isFromStripeMetadata?: boolean // ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å Stripe
}

export default function ReceiptPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const orderId = searchParams.get('orderId')
  const chargeId = searchParams.get('chargeId')
  
  const [order, setOrder] = useState<Order | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    if (orderId) {
      fetchOrder(orderId)
    } else if (chargeId) {
      fetchOrderByChargeId(chargeId)
    } else {
      setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°')
      setLoading(false)
    }
  }, [orderId, chargeId])

  const fetchOrder = async (id: string) => {
    try {
      setLoading(true)
      const response = await fetch(`/api/orders/${id}`)
      
      if (!response.ok) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠')
      }

      const data = await response.json()
      setOrder(data.order)
    } catch (err: any) {
      console.error('Error fetching order:', err)
      setError(err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ')
    } finally {
      setLoading(false)
    }
  }

  const fetchOrderByChargeId = async (id: string) => {
    try {
      setLoading(true)
      console.log('üîç Fetching order by chargeId:', id)
      
      const url = `/api/orders/by-charge/${id}`
      console.log('üì° Calling API:', url)
      
      const response = await fetch(url)
      console.log('üì• Response status:', response.status)
      console.log('üì• Response ok:', response.ok)
      
      if (!response.ok) {
        const errorText = await response.text()
        console.error('‚ùå API Error response:', errorText)
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ')
      }

      const data = await response.json()
      console.log('‚úÖ Order data received:', data)
      console.log('üè™ Shop Name:', data.order?.shopName)
      console.log('üì¶ Items:', data.order?.items)
      console.log('üí∞ Total Amount:', data.order?.totalAmount)
      console.log('üìã Full Order:', JSON.stringify(data.order, null, 2))
      setOrder(data.order)
    } catch (err: any) {
      console.error('‚ùå Error fetching order by charge:', err)
      console.error('‚ùå Error stack:', err.stack)
      setError(err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ')
    } finally {
      setLoading(false)
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return new Intl.DateTimeFormat('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    }).format(date)
  }

  const handlePrint = () => {
    window.print()
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <Loader2 className="w-12 h-12 animate-spin text-[#ff9800] mx-auto mb-4" />
          <p className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à...</p>
        </div>
      </div>
    )
  }

  if (error || !order) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 p-4">
        <Card className="max-w-md w-full">
          <CardContent className="p-12 text-center">
            <Receipt className="w-16 h-16 text-red-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-900 mb-2">‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à</h2>
            <p className="text-gray-600 mb-6">{error}</p>
            <Button onClick={() => router.push('/profile?tab=my-orders')}>
              ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8 print:bg-white print:py-0">
      <div className="container mx-auto px-4 max-w-3xl print:px-2 print:max-w-full">
        {/* Header Actions - Hidden on print */}
        <div className="mb-6 flex gap-3 print:hidden">
          <Button
            variant="outline"
            onClick={() => router.push('/profile?tab=my-orders')}
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            ‡∏Å‡∏•‡∏±‡∏ö
          </Button>
          <Button
            onClick={handlePrint}
            className="bg-[#ff9800] hover:bg-[#ff9800]/90"
          >
            <Download className="w-4 h-4 mr-2" />
            ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
          </Button>
        </div>

        {/* Warning Badge - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏à‡∏≤‡∏Å Stripe */}
        {order.isFromStripeMetadata && (
          <div className="mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg print:hidden">
            <div className="flex items-start gap-3">
              <div className="flex-shrink-0">
                <svg className="w-5 h-5 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="flex-1">
                <h3 className="text-sm font-medium text-yellow-800 mb-1">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå</h3>
                <p className="text-sm text-yellow-700">
                  ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (Stripe) ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö 
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏Å‡∏°
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Receipt Card */}
        <Card className="print:shadow-none print:border-0">
          <CardHeader className="text-center border-b pb-6 print:pb-3">
            <div className="flex justify-center mb-4 print:mb-2">
              <div className="bg-green-100 p-4 rounded-full print:p-2">
                <CheckCircle className="w-12 h-12 text-green-600 print:w-8 print:h-8" />
              </div>
            </div>
            <CardTitle className="text-2xl mb-2 print:text-xl print:mb-1">‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</CardTitle>
            <p className="text-sm text-gray-500 print:text-xs">Wow Key Store</p>
          </CardHeader>

          <CardContent className="p-8 print:p-4">
            {/* Order Info */}
            <div className="grid grid-cols-2 gap-4 mb-6 print:gap-2 print:mb-3">
              <div>
                <p className="text-sm text-gray-500 mb-1 print:text-xs">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</p>
                <p className="font-mono text-sm font-semibold print:text-xs">{order.id}</p>
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-500 mb-1 print:text-xs">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</p>
                <p className="text-sm font-semibold print:text-xs">{formatDate(order.createdAt)}</p>
              </div>
            </div>

            <Separator className="my-6 print:my-3" />

            {/* Shop Info */}
            <div className="mb-6 print:mb-3">
              <div className="flex items-center gap-2 mb-2 print:mb-1">
                <Store className="w-4 h-4 text-gray-500 print:w-3 print:h-3" />
                <p className="text-sm font-semibold print:text-xs">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</p>
              </div>
              <p className="text-lg font-bold text-gray-900 print:text-base">{order.shopName}</p>
              <p className="text-sm text-gray-500 print:text-xs">‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô: {order.shopId}</p>
            </div>

            <Separator className="my-6 print:my-3" />

            {/* Items */}
            <div className="mb-6 print:mb-3">
              <div className="flex items-center gap-2 mb-4 print:mb-2">
                <Package className="w-4 h-4 text-gray-500 print:w-3 print:h-3" />
                <p className="text-sm font-semibold print:text-xs">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
              </div>
              
              <div className="space-y-3 print:space-y-2">
                {order.items.map((item, index) => (
                  <div key={index} className="flex justify-between items-start print:text-sm">
                    <div className="flex-1">
                      <p className="font-medium print:text-sm">{item.name}</p>
                      <p className="text-xs text-gray-500">‡∏£‡∏´‡∏±‡∏™: {item.productId}</p>
                    </div>
                    <p className="font-semibold ml-4 print:text-sm">
                      ‡∏ø{item.price.toLocaleString()}
                    </p>
                  </div>
                ))}
              </div>
            </div>

            <Separator className="my-6 print:my-3" />

            {/* Totals */}
            <div className="space-y-3 print:space-y-2">
              <div className="flex justify-between text-sm print:text-xs">
                <span className="text-gray-600">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</span>
                <span className="font-medium">‡∏ø{order.totalAmount.toLocaleString()}</span>
              </div>
              <div className="flex justify-between text-sm print:text-xs">
                <span className="text-gray-600">‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° (10%)</span>
                <span className="font-medium">‡∏ø{order.platformFee.toLocaleString()}</span>
              </div>
              <Separator className="print:my-2" />
              <div className="flex justify-between text-lg font-bold print:text-base">
                <span>‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                <span className="text-[#ff9800]">‡∏ø{order.totalAmount.toLocaleString()}</span>
              </div>
            </div>

            <Separator className="my-6 print:my-3" />

            {/* Payment Info */}
            <div className="mb-6 print:mb-3">
              <div className="flex items-center gap-2 mb-3 print:mb-2">
                <CreditCard className="w-4 h-4 text-gray-500 print:w-3 print:h-3" />
                <p className="text-sm font-semibold print:text-xs">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
              </div>
              
              <div className="grid grid-cols-2 gap-3 text-sm print:gap-2 print:text-xs">
                <div>
                  <p className="text-gray-500">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
                  <p className="font-medium text-green-600">
                    {order.paymentStatus === 'completed' ? '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß' : order.paymentStatus}
                  </p>
                </div>
                <div>
                  <p className="text-gray-500">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</p>
                  <p className="font-medium">
                    {order.status === 'pending' && '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'}
                    {order.status === 'processing' && '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'}
                    {order.status === 'completed' && '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}
                    {order.status === 'cancelled' && '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'}
                  </p>
                </div>
                <div className="col-span-2 print:hidden">
                  <p className="text-gray-500">Payment Intent ID</p>
                  <p className="font-mono text-xs">{order.paymentIntentId}</p>
                </div>
                {order.transferId && (
                  <div className="col-span-2 print:hidden">
                    <p className="text-gray-500">Transfer ID</p>
                    <p className="font-mono text-xs">{order.transferId}</p>
                  </div>
                )}
              </div>
            </div>

            {/* Footer */}
            <div className="mt-8 pt-6 border-t text-center text-sm text-gray-500 print:mt-4 print:pt-3 print:text-xs">
              <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Wow Key Store</p>
              <p className="mt-2 print:mt-1">‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</p>
            </div>
          </CardContent>
        </Card>

        {/* Print Footer */}
        <div className="hidden print:block mt-8 text-center text-xs text-gray-400">
          <p>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Wow Key Store</p>
          <p>‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠: {formatDate(new Date().toISOString())}</p>
        </div>
      </div>
    </div>
  )
}
